<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="TestKegel" id="1" localization="8" tooltip="Liest ein Kegel-Objekt ein und gibt deren Daten aus.&#x0A;Dient als eine Hilfe um den Kegel Objekt zu verstehen.&#x0A;" x="444" y="183"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    Data = None
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here

        pass

    def onUnload(self):
        #put clean-up code here
        self.Data = None
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_KegelErhalten(self, data = None):
        # Hier im Beispiel werden die Werte ausgegeben.
        self.logger.info("Die Werte vom Kegel sind: X %s - Y %s  W %s - H %s "%(data[0],data[1],data[2],data[3]))
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="KegelErhalten" type="0" type_size="1" nature="1" inner="0" tooltip="" id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="GetKegel" id="3" localization="8" tooltip="Sucht und gibt ein Array mit Kegel Informationen zurück" x="138" y="46"><bitmap>media/images/box/tracker/tracker.png</bitmap><script language="4"><content><![CDATA[import cv2
import numpy
# https://stackoverflow.com/questions/22593451/how-to-import-opencv-on-nao-in-python

class MyClass(GeneratedClass):
    cascadeFile = ''

    def __init__(self):
        GeneratedClass.__init__(self)
        self.avd = None
        self.strMyClientName = None
        #self.capture = cv2.CaptureFromCAM(0)
    def onLoad(self):
        #put initialization code here
        self.connectToCamera()
        self.cascadeFile = ALFrameManager.getBehaviorPath(self.behaviorId) + self.getParameter("Cascade")
        self.logger.info("GetKegel: Cascade: %s" % self.cascadeFile)
        pass

    def onUnload(self):
        #put clean-up code here
        self.disconnectFromCamera()
        self.avd = None
        self.strMyClientName = None
        self.cascadeFile = None
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.logger.info("GetKegel: getting camera image...")

        try:
            self.logger.info("OpenCV Version %s" % cv2.__version__)
            dataImage = self.avd.getImageRemote(self.strMyClientName)

            self.logger.info("GetKegel: camera image is null: %s" % dataImage is None)

            width = 0
            height = 0
            pX = 0
            pY = 0
            imageW = 0
            imageH = 0
            if dataImage is not None:
                self.logger.info("GetKegel: camera image got")
                img = (numpy.reshape(numpy.frombuffer(dataImage[6], dtype = '%iuint8' % dataImage[2]), (dataImage[1], dataImage[0], dataImage[2])))
                imageH, imageW, channels = img.shape
                img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                face_cascade = cv2.CascadeClassifier(self.cascadeFile)
                faces = face_cascade.detectMultiScale(img)
                for x,y,w,h in faces:
                    if w > width:
                        width = w
                        height = h
                        pX = x
                        pY = y

                    img = cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255,0), 3)
                    self.logger.info("GetKegel: Kegel WERTE is: %s - %s ; Position: x %s y %s" % (w, h, x, y))
                #Save File https://stackoverflow.com/questions/51319930/how-to-write-and-log-to-a-file-on-my-nao-robot

                cv2.imwrite('/home/nao/.local/share/Bilder/Kegel_copy.png', img)
                #cv2.imwrite(ALFrameManager.getBehaviorPath(self.behaviorId) + 'Kegel_copy.png', img)

                # Sendet ein Kegel-Objekt zurück, wenn er ein Kegel gefunden hat.
                #self.log("GetKegel: Kegel height is: %s" % height)
                if width > 0:
                    a = [pX, pY, width, height, imageW, imageH]
                    self.onUnload()
                    self.Kegel(a)
                else:
                    self.onStopped()
                    pass

        except BaseException, err:
            self.logger.info("ERROR: Error getting camera image: %s" % err)
            self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def connectToCamera(self):
        self.logger.info("GetKegel: connecting to camera...")
        try:
            self.avd = ALProxy("ALVideoDevice")

            self.strMyClientName = self.avd.subscribeCamera(self.getName(), 0, 1, 11, 5)
            self.logger.info("GetKegel: connected to camera")
        except BaseException, err:
            self.logger.info("GetKegel: error connecting to camera: %s" % err)

    def disconnectFromCamera(self):
        self.logger.info("GetKegel: disconnecting from camera...")
        if self.avd is not None:
            try:
                self.avd.unsubscribe( self.strMyClientName )
            except BaseException, err:
                self.logger.info("GetKegel: error disconnecting from camera: %s" % err)

        self.logger.info("GetKegel: disconnected from camera")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Kegel" type="0" type_size="1" nature="2" inner="0" tooltip="Ein Array Objekt mit allen wichtigen Information (Höhe, Breite, Position X und Y)" id="5" /><Parameter name="Cascade" inherits_from_parent="0" content_type="4" value="/HaarCascade/Cascade_Kegel_Normal.xml" default_value="" tooltip="" id="6" /></Box><Box name="ERROR_KeinKegel" id="2" localization="8" tooltip="" x="452" y="73"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="ZielMittig" id="4" localization="8" tooltip="" x="450" y="303"><bitmap>media/images/box/interaction/target_face.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_InfoErhalten(self, p):
        # Kegel Informationen
        x = p[0]
        y = p[1]
        width = p[2]
        height = p[3]
        # Bild Informationen
        ImageW = p[4]
        ImageH = p[5]

        centerH = x + (width / 2)
        centerV = y + (height / 2)
        center = [centerH, centerV]



        mitteH1 = (ImageH /2)  -  (ImageH * 0.1)
        mitteH2 = (ImageH /2 ) + (ImageH * 0.1)

        mitteV1 = (ImageW /2)  -  (ImageW * 0.1)
        mitteV2 = (ImageW /2 ) + (ImageW * 0.1)

        if centerH <= mitteH2 and centerH >= mitteH1:
            if centerV <= mitteV2 and centerV >= mitteV1:
                self.logger.info("Ziel Mitting")
                pass
            else:
                pass
        else:
            pass



        #self.logger.info("Die Werte vom Kegel sind: X %s - Y %s  W %s - H %s "%(p[0],p[1],p[2],p[3]))
        self.Ja() #activate the output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="InfoErhalten" type="0" type_size="1" nature="1" inner="0" tooltip="" id="2" /><Output name="Ja" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Output name="Nein" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>