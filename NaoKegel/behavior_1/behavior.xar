<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="GetKegel" id="1" localization="8" tooltip="Sucht und gibt ein Kegel zurück" x="101" y="68"><bitmap>media/images/box/tracker/tracker.png</bitmap><script language="4"><content><![CDATA[import cv2
import numpy
# https://stackoverflow.com/questions/22593451/how-to-import-opencv-on-nao-in-python

class MyClass(GeneratedClass):
    cascadeFile = ''

    def __init__(self):
        GeneratedClass.__init__(self)
        self.avd = None
        self.strMyClientName = None
        #self.capture = cv2.CaptureFromCAM(0)
    def onLoad(self):
        #put initialization code here
        self.connectToCamera()
        self.cascadeFile = ALFrameManager.getBehaviorPath(self.behaviorId) + self.getParameter("Cascade")
        self.log("GetKegel: Cascade: %s" % self.cascadeFile)
        pass

    def onUnload(self):
        #put clean-up code here
        self.disconnectFromCamera()
        self.avd = None
        self.strMyClientName = None
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.log("GetKegel: getting camera image...")

        try:
            self.log("OpenCV Version %s" % cv2.__version__)
            dataImage = self.avd.getImageRemote(self.strMyClientName)

            self.log("GetKegel: camera image is null: %s" % dataImage is None)

            width = 0
            height = 0
            pX = 0
            pY = 0
            imageW = 0
            imageH = 0
            if dataImage is not None:
                self.log("GetKegel: camera image got")
                img = (numpy.reshape(numpy.frombuffer(dataImage[6], dtype = '%iuint8' % dataImage[2]), (dataImage[1], dataImage[0], dataImage[2])))
                imageH, imageW, channels = img.shape
                img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                face_cascade = cv2.CascadeClassifier(self.cascadeFile)
                faces = face_cascade.detectMultiScale(img_gray)
                for x,y,w,h in faces:
                    if w > width:
                        width = w
                        height = h
                        pX = x
                        pY = y

                    img = cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255,0), 3)
                    self.log("GetKegel: Kegel WERTE is: %s - %s ; Position: x %s y %s" % (w, h, x, y))

                cv2.imwrite(ALFrameManager.getBehaviorPath(self.behaviorId) + 'Kegel_copy.png', img)
                # Sendet ein Kegel-Objekt zurück, wenn er ein Kegel gefunden hat.
                #self.log("GetKegel: Kegel height is: %s" % height)
                if width > 0:
                    kegel = Kegel(pX, pY, width, height, imageW, imageH)
                    self.log("GetKegel: camera Kegel is null: %s" % kegel is None)
                    self.Kegel(kegel)
                    self.KegelGefunden()
                #else
                 #   self.onStopped()

        except BaseException, err:
            self.log("ERROR: Error getting camera image: %s" % err)
        self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def connectToCamera(self):
        self.log("GetKegel: connecting to camera...")
        try:
            self.avd = ALProxy("ALVideoDevice")

            self.strMyClientName = self.avd.subscribeCamera(self.getName(), 0, 1, 11, 5)
            self.log("GetKegel: connected to camera")
        except BaseException, err:
            self.log("GetKegel: error connecting to camera: %s" % err)

    def disconnectFromCamera(self):
        self.log("GetKegel: disconnecting from camera...")

        try:
            self.avd.unsubscribe( self.strMyClientName )
        except BaseException, err:
            self.log("GetKegel: error disconnecting from camera: %s" % err)

        self.log("GetKegel: disconnected from camera")


class Kegel:
    X = 0
    Y = 0
    Width = 0
    Height = 0
    ImageHeight = 0
    ImageWidth = 0
    def __init__(self, x, y, width, height, imageW, imageH):
        self.X = x
        self.Y = y
        self.Width = width
        self.Height = height
        self.ImageHeight = imageH
        self.ImageWidth = imageW
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="KegelGefunden" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="Kegel" type="0" type_size="1" nature="2" inner="0" tooltip="Ein Kegel Objekt mit allen wichtigen Information (Höhe, Breite, Position X und Y)" id="6" /><Parameter name="Cascade" inherits_from_parent="0" content_type="4" value="/../HaarCascade/Cascade_Kegel_Normal.xml" default_value="" tooltip="" id="7" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>